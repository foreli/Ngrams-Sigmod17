Ανάπτυξη Λογισμικού για Πληροφοριακά Συστήματα 2017-2018
    <? ονόματα - ΑΜ ?>
    Κολυβάς Κωνσταντίνος - 1115201200066

Μεταγλώττιση: 
    $ cd build
    $ cmake ..
    $ make ngrams
Εκτέλεση:
    $ ngrams -i <init_file> -q <query_file>


1. Λειτουργίες του Trie:
 1.1. Διαδικασία εισαγωγής ενός n-gram:
    a. Διαβάζουμε του n-gram από το αρχείο (είτε του init, είτε του query με την εντολή A), το χωρίζουμε σε λέξεις και τις εισάγουμε σε ένα αντικείμενο mstd::vector (βλ. 2.1<? check this ?> mstd::vector). 
    b. Για κάθε λέξη του n-gram (πλην της τελευταίας) ελέγχουμε αν υπάρχει ήδη στο trie (ως παιδί του κόμβου στον οποίο βρισκόμαστε). 
      + Αν υπάρχει, τότε συνεχίζουμε σε εκείνο τον κόμβο και ελέγχουμε την επόμενη λέξη του n-gram
      + Αν όχι, τότε την εισάγουμε ως παιδί του κόμβου όπου βρισκόμαστε και ελέγχουμε την επόμενη λέξη του n-gram
    c. Αφού έχουμε βρει όλο το "μονοπάτι" λέξεων μέχρι και πριν το τέλος του n-gram, ελέγχουμε αν ο κόμβος περιέχει ως παιδί το τέλος του ngram
      + Αν υπάρχει, τότε την θέτουμε ως end of word
      + Αν όχι, τότε την εισάγουμε ως παιδί, θέτοντάς την ως end of word.


2. Κλάσεις:
    Σημείωση: Οι κλάσεις που δημιουργήθηκαν στα πλαίσια αυτής της εργασίας, βρίσκονται στο namespace mstd
    2.1. mstd::vector (template)
        Παρόμοια λογική με το std::vector της stl.
        Wrapper για έναν πίνακα στοιχείων T, όπου μπορούμε να εισάγουμε στοιχεία και να αλλάζουμε τα ήδη υπάρχοντα.
        Κάθε αντικείμενο έχει ένα μέγεθος και μια χωρητικότητα. Αν, εισάγωντας κάποιο στοιχείο στο vector, το μέγεθος θα ξεπερνούσε την χωρητικότητα, τότε
        η χωρητικότητα διπλασιάζεται. Αντίστοιχα, όταν το μέγεθος πέσει στο 1/4 της χωρητικότητας, η τελευταία υπό-διπλασιάζεται (Υπο-διπλασιάζεται στο 1/4 για να αποφευχθούν πολλαπλές μετακινήσεις στοιχείων).

        2.1.1. T *m_push(T &ent);
            Μετακινεί (χρησιμοποιεί move semantics) την παράμετρο <ent> στο τέλος του πίνακα (και διπλασιάζει την χωρητικότητα αν χρειάζεται).
            Επιστρέφει έναν δείκτη στη θέση του νέου στοιχείου.
        2.1.2. T *m_insert_at(int index, T &ent);
            Εισάγει το στοιχείο <ent> στην θέση <index> του πίνακα (χρησιμοποιεί move semantics), μετακινώντας τα υπόλοιπα στοιχεία του πίνακα μια θέση δεξιά (και διπλασιάζει την χωρητικότητα αν χρειάζεται).
            Επιστρέφει έναν δείκτη στη θέση του νέου στοιχείου.
        2.1.3. T &at/get/operator[](int index);
            Επιστρέφει ένα reference στο στοιχείο που υπάρχει στην θέση <index>. "Ρίχνει" std::out_of_range exception αν το index είναι εκτός των στοιχείων του πίνακα.
    2.2. namespace helpers:: - Διάφορες χρήσιμες συναρτήσεις
        2.2.1. void split(const std::string &s, mstd::vector<std::string> &v, char delim);
            Χωρίζει την συμβολοσειρά <s> σύμφωνα με τον χαρακτήρα <delim> και εισάγει τα αποτελέσματα στο mstd::vector <v>
        2.2.2. std::string join(const mstd::vector<std::string> &v, char on);
            Ενώνει τα στοιχεία του mstd::vector <v>, διαχωρίζοντάς τα με τον χαρακτήρα <on>.
    2.3. parser
        Διαβάζει μία προς μία τις γραμμές του αρχείου που έχει οριστεί στον constructor.
        2.3.1. bool next_init(mstd::vector<std::string> *v);
            Διαβάζει την επόμενη γραμμή από το init αρχείο, την χωρίζει στον χαρακτήρα ' ' και εισάγει το αποτέλεσμα στο mstd::vector <v>.
            Επιστρέφει true αν έχουμε φτάσει σε eof
        2.3.2. bool next_command(mstd::vector<std::string> *v, int *type);
            Διαβάζει την επόμενη γραμμή από το query αρχείο, την χωρίζει στον χαρακτήρα ' ', θέτει το <type> σε μία από τις 5 σταθερές (ορισμένες στο include/parser.hpp)
                - INSERTION
                - QUERY
                - DELETION
                - FINISH
                - UNKNOWN_OP
            και εισάγει στο mstd::vector <v> τις λέξεις του ngram (χωρίς τον χαρακτήρα της εντολής (A/Q/D/F)
    


    
